tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/5.0.5/types.yaml
  - plugin:cloudify-terraform-plugin

inputs:

  terraform_path:
    type: string
    default: /usr/bin/terraform

  AWS_ACCESS_KEY_ID:
    type: string
    default: { get_secret: aws_access_key_id }

  AWS_SECRET_ACCESS_KEY:
    type: string
    default: { get_secret: aws_secret_access_key }

  AWS_DEFAULT_REGION:
    type: string
    default: { get_secret: ec2_region_name }

  public_key:
    default: { get_secret: agent_key_public }

  backend_options:
    default:
      bucket: terraform-integration
      key: terraform.tfstate
      region: { get_input: AWS_DEFAULT_REGION }

node_types:
  terraform_subnet:
   derived_from: cloudify.nodes.Network
   properties:
     vpc_id:
       default: ''
     cidr_block:
       default: ''
     map_public_ip_on_launch:
       default: ''
     availability_zone:
       default: ''
  terraform_ec2_instance:
    derived_from: cloudify.nodes.Compute
    properties:
      instance_type:
        default: ''
      ami:
        default: ''
      key_name:
        default: ''
      availability_zone:
        default: ''
      instance_state:
        default: ''
      agent_config:
        install_method: none

node_templates:

  test_subnet:
    type: terraform_subnet
    properties:
      vpc_id: { get_attribute: [ aws_two_tier_example, resources, aws_subnet.default, primary, attributes, vpc_id ] }
      cidr_block: { get_attribute: [ aws_two_tier_example, resources, aws_subnet.default, primary, attributes, cidr_block ] }
      availability_zone: { get_attribute: [ aws_two_tier_example, resources, aws_subnet.default, primary, attributes, availability_zone ] }
      map_public_ip_on_launch: { get_attribute: [ aws_two_tier_example, resources, aws_subnet.default, primary, attributes, map_public_ip_on_launch ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: aws_two_tier_example

  test_ec2_instance:
    type: terraform_ec2_instance
    properties:
      ip: { get_attribute: [ aws_two_tier_example, resources, aws_instance.web, primary, attributes, public_ip ] }
      instance_type: { get_attribute: [ aws_two_tier_example, resources, aws_instance.web, primary, attributes, instance_type ] }
      ami: { get_attribute: [ aws_two_tier_example, resources, aws_instance.web, primary, attributes, ami ] }
      key_name: { get_attribute: [ aws_two_tier_example, resources, aws_instance.web, primary, attributes, key_name ] }
      availability_zone: { get_attribute: [ aws_two_tier_example, resources, aws_instance.web, primary, attributes, availability_zone ] }
      instance_state: { get_attribute: [ aws_two_tier_example, resources, aws_instance.web, primary, attributes, instance_state ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: aws_two_tier_example

  # Build an infrastructure in AWS
  aws_two_tier_example:
    type: cloudify.nodes.terraform.Module
    properties:
      executable_path: { get_input: terraform_path }
      storage_path: /tmp/template
      plugins_dir: /tmp/template
      resource_config:
        backend:
          name: s3
          options:
            bucket: terraform-integration
            key: terraform.tfstate
            region: { get_input: AWS_DEFAULT_REGION }
        environment_variables:
          AWS_ACCESS_KEY_ID: { get_input: AWS_ACCESS_KEY_ID }
          AWS_SECRET_ACCESS_KEY: { get_input: AWS_SECRET_ACCESS_KEY }
          AWS_DEFAULT_REGION: { get_input: AWS_DEFAULT_REGION }
        variables:
          aws_region: { get_input: AWS_DEFAULT_REGION }
          key_name: terraform
          public_key: { get_input: public_key }
        source: resources/aws-two-tier.zip

capabilities:
  host_ip:
    value: { get_attribute: [ test_ec2_instance, ip ] }
  host_instance_type:
    value: { get_attribute: [ test_ec2_instance, instance_type ] }
  host_availability_zone:
    value: { get_attribute: [ test_ec2_instance, availability_zone ] }
  host_instance_state:
    value: { get_attribute: [ test_ec2_instance, instance_state ] }
  subnet_cidr_block:
    value: { get_attribute: [ test_subnet, cidr_block ] }
  subnet_availability_zone:
    value: { get_attribute: [ test_subnet, availability_zone ] }
